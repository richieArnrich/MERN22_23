What is react?
React is a front-end library used to build interactive webpages
It is a JavaScript library for building user interfaces
-----------------------
Advantages of react
*   Easy to learn and use
*   Fast and efficient
*   Large community of developers
*   Supports server-side rendering
*   Uses components which makes it easy to maintain code
-----------------------
Disadvantages of react
*   Steeper learning curve for complex applications
*   Not suitable for complex state management
-----------------------
----------------------------------------------------------------
What are components?
Components are pieces of code that are used to perform a task and represent a unit of the UI 
They can be reused throughout the application
-----------------------
### React Components
Type of components:
*   Functional components
    They are JavaScript/Typescript Functions which return 1 html element at a time
    They get access to objects called as props
    AKA stateless components

*   Class components
    They are JavaScript/Typescript classes which has a render() which returns 1 html element at a time
    They get access to props and state
    AKA stateful components

What is JSX?
It stands for JavaScript and XML
JSX is a syntax extension for JavaScript that allows you to write HTML in your JavaScript files. It
is a way to write HTML in your JavaScript code. It is not a separate language, but rather
a syntax extension for JavaScript. It is used to create React elements and is a key part of the
React library.
XML: Xtensible Markup language

-----------------------
###Props and State in react
-----------------------------
Props:
*   Props are short for properties
*   They are immutable objects
*   Data passed down from parent component to child component is called as props

State:
*   State is an object that stores data that can change
*   They are mutable objects
*   Data is stored in the component itself and can be changed at any time
*   State is used to store data that can change over time, such as user input or API data
*   Initialy state was only accessible inside class components but post React 16 version,
state is also accessible in functional components using hooks
-------------------------------------------------------------------------
### Parent child relationship
---------------------------
    Parent component is the component that renders the child component (calls the child component)
    Child component is the component that is rendered by the parent component (is called by the parent component)
    ---------------------------
    Data transfer between parent to child
    ---------------------------
    Data is passed from parent to child using props
    ---------------------------
    Data transfer from child to parent
    ---------------------------
    Data is passed from child to parent using callback functions

---------------------------
### Data Binding in react
---------------------------
    Data binding is the process of linking the data in the component to the UI
    It is a two-way process
    1.  Data binding from component to UI (1 way databinding)
    2.  Data binding from UI to component (2 way databinding)
    ---------------------------
    1 way data binding
    ---------------------------
    *   When data is changed in the component, the UI is updated automatically
    *   This is the default behavior in React
    --------------------------
    2 way data binding
    ---------------------------
    *   When data is changed in the UI, the component is updated automatically
    *   This is achieved using state and event handlers in React    
--------------------------------------------------
### UseContext hook
---------------------------
    *   useContext is a hook that allows you to access the context of the component
    *   Steps to create context
        Step 1 : create context using React.createContext() (Eg: let UserContext = React.createContext())
        Step 2 : wrap the context in a provider component (Eg: UserContext.provider)
        Step 3 : pass the context to the provider component (Eg: 
        <UserContext provider value={someValue}>
            {children}
        <UserContext provider>
        Step 4 : use the context in the component (Eg: const user = useContext(UserContext))
        Step 5 : Wrap the utilising component with the provider
        --------------------------------------------------
-----------------------------------------------------------------------------------------
### Virtual DOM in React
-----------------------------------------------------------------------------------------
*   Virtual DOM is a lightweight in-memory representation of the real DOM
*   It is abstraction of real-dom
*   When the state of the component changes, the virtual DOM is updated
*   The virtual DOM is then compared to the real DOM
*   If there are any differences, the real DOM is updated
*   This process is called reconciliation
*   Virtual DOM is used to improve the performance of the application
*   It reduces the number of DOM mutations
*   It also makes the application more predictable and easier to debug
--------------------------------------------------
Diffing and reconciliation in VDOM
--------------------------------------------------
*   Diffing is the process of comparing the virtual DOM to the real DOM
*   Reconciliation is the process of updating the real DOM based on the differences found 
    during diffing

----------------------------------------------------------------------------------------
### Life Cycle Methods in React
----------------------------------------------------------------------------------------
*   Life cycle methods are methods that are called at different stages of a component's life cycle
*   There are several life cycle methods in React
*   The most commonly used life cycle methods are
    1. constructor()
    2. getDerivedStateFromProps()
    3. shouldComponentUpdate()
    4. render()
    5. componentDidMount()
    6. componentWillUnmount()
    7. getSnapshotBeforeUpdate()
    8. componentDidUpdate()
    9. static getDerivedStateFromError(error) 
    fallback ui

Phases of a component's lifecycle in React
--------------------------------------------------
1. Initialisation:
*  Initialising the state or the props

2.  Mounting:
*   The component is rendered to the DOM
*   The component is mounted to the DOM
*   The component is visible to the user
*   The component is rendered to the DOM for the first time
*   When mounting is completed the componentDidMount() is called, which recalls the render() again

3. Updation:
*   The component's state or props change
*   The component is updated
*   The component is re-rendered to the DOM

4. Unmounting:
*   The component is removed from the DOM
*   The component is unmounted from the DOM
---------------------------------------------------------
### Making API calls in react:
*   Using componentDidMount():
*   This method is called after the component has been rendered to the DOM
*   It is used to make API calls after the component has been rendered
*   It is used to fetch data from the server after the component has been rendered
*   We can make asynchrounous timer function calls in this function
*   When a component makes an API or a timer function call, it undergoes sideEffect
*   SideEffect is a function that has a side effect, i.e., it changes the state
*   When a component undergoes sideEffect, it is re-rendered to the DOM
--------------------------------------------------------------
UseEffect hook:
*   The useEffect hook is used to handle side effects in functional components
*   It is used to make API calls, timer function calls, and other side effects
*   It is used to fetch data from the server
*   It is used to update the state of the component
*   It is used to update the DOM
Syntax:
useEffect(()=>{
    // code to be executed
},[])